"""initial_migration

Revision ID: 6531f34f8993
Revises: d2bedfd6f55a
Create Date: 2023-10-15 04:21:21.384969

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '6531f34f8993'
down_revision = 'd2bedfd6f55a'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('feeds')
    op.drop_table('users_tags')
    op.drop_table('users_skills')
    op.drop_table('announcements')
    op.drop_index('ix_tags_id', table_name='tags')
    op.drop_table('tags')
    op.drop_table('techie_of_the_month')
    op.drop_index('ix_skills_id', table_name='skills')
    op.drop_table('skills')
    op.alter_column('users', 'status',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.Enum('TO_CONTACT', 'IN_REVIEW', 'INTERVIEWED', 'ACCEPTED', 'NO_SHOW', 'REJECTED', 'TO_BE_ONBOARDED', 'CONTACTED', name='userstatus'),
               nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'status',
               existing_type=sa.Enum('TO_CONTACT', 'IN_REVIEW', 'INTERVIEWED', 'ACCEPTED', 'NO_SHOW', 'REJECTED', 'TO_BE_ONBOARDED', 'CONTACTED', name='userstatus'),
               type_=sa.VARCHAR(length=255),
               nullable=True)
    op.create_table('skills',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('skills_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='skills_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='skills_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_skills_id', 'skills', ['id'], unique=False)
    op.create_table('techie_of_the_month',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('points', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='techie_of_the_month_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='techie_of_the_month_pkey')
    )
    op.create_table('tags',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('tags_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='tags_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_tags_id', 'tags', ['id'], unique=False)
    op.create_table('announcements',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('content', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('image_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='announcements_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='announcements_pkey')
    )
    op.create_table('users_skills',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('skill_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['skill_id'], ['skills.id'], name='users_skills_skill_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='users_skills_user_id_fkey'),
    sa.PrimaryKeyConstraint('user_id', 'skill_id', name='users_skills_pkey')
    )
    op.create_table('users_tags',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tag_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], name='users_tags_tag_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='users_tags_user_id_fkey'),
    sa.PrimaryKeyConstraint('user_id', 'tag_id', name='users_tags_pkey')
    )
    op.create_table('feeds',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('content', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('feed_pic_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='feeds_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='feeds_pkey')
    )
    # ### end Alembic commands ###
